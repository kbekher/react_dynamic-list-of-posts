{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","services/comment.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","services/user.ts","services/post.ts","index.tsx"],"names":["PostsList","posts","selectedPost","setSelectedPost","setIsFormShown","handleSelectPost","post","handleReset","className","map","id","title","type","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","setComments","setErrorMessage","useState","name","email","comment","formValues","setFormValues","nameError","emailErrorMessage","commentError","errors","setErrors","isSubmitting","setIsSubmitting","emailPattern","onSubmit","event","preventDefault","normilizedName","trim","normilizedEmail","test","newComment","postId","addComment","prev","catch","finally","htmlFor","placeholder","classNames","value","onChange","target","PostDetails","isFormShown","comments","isLoading","setIsLoading","errorMessage","useEffect","handleDeleteComment","commentId","currentComments","filter","deleteComment","length","href","UserSelector","users","selectedUser","setSelectedUser","isActive","setIsActive","handleSelectUser","user","role","App","setUsers","setPosts","userId","ReactDOM","render","document","getElementById"],"mappings":"+QAUaA,EAA6B,SAAC,GAKpC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,gBACAC,EACI,EADJA,eAEMC,EAAmB,SAACC,GAAD,OAAgB,WACvCH,EAAgBG,GAChBF,GAAe,KAGXG,EAAc,WAClBJ,EAAgB,OAGlB,OACE,sBAAK,UAAQ,YAAb,UACE,mBAAGK,UAAU,QAAb,oBAEA,wBAAOA,UAAU,uDAAjB,UACE,gCACE,qBAAIA,UAAU,4BAAd,UACE,mCACA,uCACA,wCAIJ,gCACGP,EAAMQ,KAAI,SAAAH,GAAI,OACb,qBAAI,UAAQ,OAAZ,UACE,oBAAI,UAAQ,SAAZ,SAAsBA,EAAKI,KAE3B,oBAAI,UAAQ,YAAZ,SACGJ,EAAKK,QAGR,oBAAIH,UAAU,8BAAd,SACGF,EAAKI,MAAL,OAAYR,QAAZ,IAAYA,OAAZ,EAAYA,EAAcQ,IACzB,wBACEE,KAAK,SACL,UAAQ,aACRJ,UAAU,iBACVK,QAASN,EAJX,mBASA,wBACEK,KAAK,SACL,UAAQ,aACRJ,UAAU,0BACVK,QAASR,EAAiBC,GAJ5B,sBAlBkBA,EAAKI,gBCtC5BI,G,MAAS,kBACpB,qBAAKN,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wB,cCHbO,EAAW,oCAGjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,MAOxB,SAASI,EACPC,GAGa,IAFbC,EAEY,uDAFY,MACxBC,EACY,uDADA,KAENC,EAAuB,CAAEF,UAW/B,OATIC,IAEFC,EAAQC,KAAOC,KAAKC,UAAUJ,GAC9BC,EAAQI,QAAU,CAChB,eAAgB,oCAKbb,EAAK,KACTc,MAAK,kBAAMC,MAAMhB,EAAWO,EAAKG,MACjCK,MAAK,SAAAE,GAAQ,OAAIA,EAASC,UAGxB,IAAMC,EACN,SAAIZ,GAAJ,OAAoBD,EAAWC,IADzBY,EAEL,SAAIZ,EAAaE,GAAjB,OAA+BH,EAAWC,EAAK,OAAQE,IAFlDU,EAIH,SAACZ,GAAD,OAAiBD,EAAQC,EAAK,WC1BjC,IAAMa,EAAkC,SAAC,GAIzC,IAHLjC,EAGI,EAHJA,aACAkC,EAEI,EAFJA,YACAC,EACI,EADJA,gBAcA,EAAoCC,mBAZV,CACxBC,KAAM,GACNC,MAAO,GACPC,QAAS,KASX,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA4BL,mBAPN,CACpBM,WAAW,EACXC,kBAAmB,GACnBC,cAAc,IAIhB,mBAAOC,EAAP,KAAeC,EAAf,KAEA,EAAwCV,oBAAS,GAAjD,mBAAOW,EAAP,KAAqBC,EAArB,KACMC,EAAe,6BA8GrB,OACE,uBACE,UAAQ,iBACRC,SA5DiB,SAACC,GACpBA,EAAMC,iBACN,IAAMC,EAAiBb,EAAWH,KAAKiB,OACjCC,EAAkBf,EAAWF,MAAMgB,OAsBzC,GApBAR,EAAU,2BACLD,GADI,IAEPH,WAAYW,EACZT,cAAeJ,EAAWD,WAGvBgB,GACHT,EAAU,2BACLD,GADI,IAEPF,kBAAmB,uBAInBY,IAAoBN,EAAaO,KAAKD,IACxCT,EAAU,2BACLD,GADI,IAEPF,kBAAmB,sBAIlBU,GACCJ,EAAaO,KAAKD,IAClBf,EAAWD,QAFjB,CAOA,IAAMkB,EAAa,CACjBjD,GAAI,EACJkD,OAAQ1D,EAAaQ,GACrB6B,KAAMG,EAAWH,KACjBC,MAAOE,EAAWF,MAClBd,KAAMgB,EAAWD,SAGnBS,GAAgB,GCvHb,YAKM,IAJXU,EAIU,EAJVA,OACArB,EAGU,EAHVA,KACAC,EAEU,EAFVA,MACAd,EACU,EADVA,KAEA,OAAOQ,EAAqB,YAAa,CACvC0B,SACArB,OACAC,QACAd,SD+GAmC,CAAWF,GACR7B,MAAK,SAAAE,GACJI,GAAY,SAAC0B,GAAD,4BAAyBA,GAAzB,CAA+B9B,UAE5C+B,OAAM,kBAAM1B,EAAgB,6CAC5B2B,SAAQ,WACPd,GAAgB,GAEhBP,EAAc,2BACTD,GADQ,IAEXD,QAAS,WAMf,UAIE,sBAAKjC,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQyD,QAAQ,sBAAjC,yBAIA,sBAAKzD,UAAU,yCAAf,UACE,uBACEI,KAAK,OACL2B,KAAK,OACL7B,GAAG,sBACHwD,YAAY,eACZ1D,UAAW2D,IAAW,QAAS,CAAE,YAAapB,EAAOH,YACrDwB,MAAO1B,EAAWH,KAClB8B,SA9He,SAAChB,GACxBL,EAAU,2BACLD,GADI,IAEPH,WAAW,KAEbD,EAAc,2BACTD,GADQ,IAEXH,KAAMc,EAAMiB,OAAOF,YA0Hf,sBAAM5D,UAAU,wBAAhB,SACE,mBAAGA,UAAU,kBAGduC,EAAOH,WACN,sBACEpC,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBuC,EAAOH,WACN,mBAAGpC,UAAU,iBAAiB,UAAQ,eAAtC,iCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,aAA/B,UACE,uBAAOA,UAAU,QAAQyD,QAAQ,uBAAjC,0BAIA,sBAAKzD,UAAU,yCAAf,UACE,uBACEI,KAAK,OACL2B,KAAK,QACL7B,GAAG,uBACHwD,YAAY,iBACZ1D,UAAW2D,IAAW,QAAS,CAC7B,YAAapB,EAAOF,oBAEtBuB,MAAO1B,EAAWF,MAClB6B,SA1JgB,SAAChB,GACzBL,EAAU,2BACLD,GADI,IAEPF,kBAAmB,MAGrBF,EAAc,2BACTD,GADQ,IAEXF,MAAOa,EAAMiB,OAAOF,YAqJhB,sBAAM5D,UAAU,wBAAhB,SACE,mBAAGA,UAAU,sBAGduC,EAAOF,mBACN,sBACErC,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBuC,EAAOF,mBACN,mBAAGrC,UAAU,iBAAiB,UAAQ,eAAtC,SACGuC,EAAOF,uBAMd,sBAAKrC,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQyD,QAAQ,eAAjC,0BAIA,qBAAKzD,UAAU,UAAf,SACE,0BACEE,GAAG,eACH6B,KAAK,OACL2B,YAAY,oBACZ1D,UAAW2D,IAAW,WAAY,CAChC,YAAapB,EAAOD,eAEtBsB,MAAO1B,EAAWD,QAClB4B,SArLkB,SAC1BhB,GAEAL,EAAU,2BACLD,GADI,IAEPD,cAAc,KAGhBH,EAAc,2BACTD,GADQ,IAEXD,QAASY,EAAMiB,OAAOF,cA+KnBrB,EAAOD,cACN,mBAAGtC,UAAU,iBAAiB,UAAQ,eAAtC,gCAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEI,KAAK,SACLJ,UAAW2D,IAAW,iBAAkB,CACtC,aAAclB,IAHlB,mBAUF,qBAAKzC,UAAU,UAAf,SAEE,wBACEI,KAAK,QACLJ,UAAU,0BACVK,QAnMU,WAClBmC,EAAU,CACRJ,WAAW,EACXC,kBAAmB,GACnBC,cAAc,IAGhBH,EAAc,CACZJ,KAAM,GACNC,MAAO,GACPC,QAAS,MAsLL,4BE3PG8B,EAA+B,SAAC,GAItC,IAHLrE,EAGI,EAHJA,aACAsE,EAEI,EAFJA,YACApE,EACI,EADJA,eAEA,EAAgCkC,mBAAoB,IAApD,mBAAOmC,EAAP,KAAiBrC,EAAjB,KACA,EAAkCE,oBAAS,GAA3C,mBAAOoC,EAAP,KAAkBC,EAAlB,KACA,EAAwCrC,mBAAS,IAAjD,mBAAOsC,EAAP,KAAqBvC,EAArB,KAEAwC,qBAAU,WDnBL,IAAqBjB,ECoBxBvB,EAAgB,IAChBsC,GAAa,IDrBWf,ECsBZ1D,EAAaQ,GDrBpBwB,EAAA,2BAA0C0B,KCsB5C9B,KAAKM,GACL2B,OAAM,kBAAM1B,EAAgB,2BAC5B2B,SAAQ,kBAAMW,GAAa,QAC7B,CAACzE,IAEJ,IAIM4E,EAAsB,SAACC,GAAD,OAAuB,WACjD3C,GAAY,SAAA4C,GACV,OAAOA,EAAgBC,QAAO,SAAAxC,GAAO,OAAIA,EAAQ/B,KAAOqE,QDhBvD,SAAuBA,GAC5B,OAAO7C,EAAA,oBAA2B6C,ICiBhCG,CAAcH,GACXhB,OAAM,WACL3B,EAAYqC,GACZpC,EAAgB,+CAItB,OACE,qBAAK7B,UAAU,UAAU,UAAQ,cAAjC,SACE,sBAAKA,UAAU,UAAU,UAAQ,cAAjC,UACE,sBAAKA,UAAU,QAAf,UACE,oBAAI,UAAQ,YAAZ,oBACON,EAAaQ,GADpB,aAC2BR,EAAaS,SAGxC,mBAAG,UAAQ,WAAX,SAEIT,EAAawB,UAKnB,sBAAKlB,UAAU,QAAf,UACGkE,GAAa,cAAC,EAAD,IAEbE,GACC,qBAAKpE,UAAU,yBAAyB,UAAQ,gBAAhD,mCAKCiE,EAASU,SAAWT,GACrB,mBAAGlE,UAAU,aAAa,UAAQ,oBAAlC,6BAKAiE,EAASU,OAAS,IAAMT,GACxB,qCACE,mBAAGlE,UAAU,aAAb,uBAECiE,EAAShE,KAAI,SAAAgC,GAAO,OACnB,0BAEEjC,UAAU,mBACV,UAAQ,UAHV,UAKE,sBAAKA,UAAU,iBAAf,UACE,mBAAG4E,KAAI,iBAAY3C,EAAQD,OAAS,UAAQ,gBAA5C,SACGC,EAAQF,OAEX,wBACE,UAAQ,gBACR3B,KAAK,SACLJ,UAAU,kBACV,aAAW,SACXK,QAASiE,EAAoBrC,EAAQ/B,IALvC,8BAWF,qBAAKF,UAAU,eAAe,UAAQ,cAAtC,SACGiC,EAAQf,SApBNe,EAAQ/B,WA2BlBgE,IAAcF,GACf,wBACE,UAAQ,qBACR5D,KAAK,SACLJ,UAAU,iBACVK,QAnFe,WACzBT,GAAe,IA8EP,gCAWHoE,GACC,cAAC,EAAD,CACEtE,aAAcA,EACdkC,YAAaA,EACbC,gBAAiBA,UCjHhBgD,EAAgC,SAAC,GAKvC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,gBACArF,EACI,EADJA,gBAEA,EAAgCmC,oBAAS,GAAzC,mBAAOmD,EAAP,KAAiBC,EAAjB,KAEMC,EAAmB,SAACC,GAAD,OAAgB,WACvCJ,EAAgBI,GAChBF,GAAY,GACZvF,EAAgB,QAGlB,OACE,sBACE,UAAQ,eACRK,UAAU,qBAFZ,UAIE,qBAAKA,UAAU,mBAAf,SACE,yBACEI,KAAK,SACLJ,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdK,QAAS,kBAAM6E,GAAaD,IAL9B,UAQE,+BACIF,EAGAA,EAAahD,KAFb,kBAMJ,sBAAM/B,UAAU,gBAAhB,SACE,mBAAGA,UAAU,oBAAoB,cAAY,gBAKlDiF,GACC,qBAAKjF,UAAU,gBAAgBE,GAAG,gBAAgBmF,KAAK,OAAvD,SACE,qBAAKrF,UAAU,mBAAf,SACG8E,EAAM7E,KAAI,SAAAmF,GAAI,OACb,mBAEER,KAAI,gBAAWQ,EAAKlF,IACpBF,UAAW2D,IAAW,gBAAiB,CACrC,YAAayB,EAAKlF,MAAL,OAAY6E,QAAZ,IAAYA,OAAZ,EAAYA,EAAc7E,MAEzCG,QAAS8E,EAAiBC,GAN5B,SAQGA,EAAKrD,MAPDqD,EAAKlF,eC5CnB,IAAMoF,EAAgB,WAC3B,MAA0BxD,mBAAiB,IAA3C,mBAAOgD,EAAP,KAAcS,EAAd,KACA,EAAwCzD,mBAAsB,MAA9D,mBAAOiD,EAAP,KAAqBC,EAArB,KACA,EAAkClD,oBAAS,GAA3C,mBAAOoC,EAAP,KAAkBC,EAAlB,KACA,EAAwCrC,mBAAS,IAAjD,mBAAOsC,EAAP,KAAqBvC,EAArB,KACA,EAA0BC,mBAAwB,MAAlD,mBAAOrC,EAAP,KAAc+F,EAAd,KACA,EAAwC1D,mBAAsB,MAA9D,mBAAOpC,EAAP,KAAqBC,EAArB,KACA,EAAsCmC,oBAAS,GAA/C,mBAAOkC,EAAP,KAAoBpE,EAApB,KAiBA,OAfAyE,qBAAU,WCpBH3C,EAAmB,UDqBbJ,KAAKiE,KACf,IAEHlB,qBAAU,WEzBL,IAAkBoB,EF0BrB5D,EAAgB,IACZkD,IACFZ,GAAa,IE5BMsB,EF6BVV,EAAa7E,GE5BnBwB,EAAA,wBAAoC+D,KF6BpCnE,KAAKkE,GACLjC,OAAM,kBAAM1B,EAAgB,4BAC5B2B,SAAQ,kBAAMW,GAAa,SAE/B,CAACY,IAGF,sBAAM/E,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACE8E,MAAOA,EACPC,aAAcA,EACdC,gBAAiBA,EACjBrF,gBAAiBA,MAIrB,sBAAKK,UAAU,QAAQ,UAAQ,cAA/B,WACI+E,GACA,mBAAG,UAAQ,iBAAX,8BAKDb,GAAa,cAAC,EAAD,IAEbE,GAEC,qBACEpE,UAAU,yBACV,UAAQ,oBAFV,mCAQAP,IAAUA,EAAMkF,SAAWT,GAC3B,qBAAKlE,UAAU,0BAA0B,UAAQ,aAAjD,0BAKAP,GAASA,EAAMkF,OAAS,IAAMT,GAC9B,cAAC,EAAD,CACEzE,MAAOA,EACPC,aAAcA,EACdC,gBAAiBA,EACjBC,eAAgBA,YAO1B,qBACE,UAAQ,UACRI,UAAW2D,IACT,OACA,YACA,eACA,UAAW,CACT,gBAAiBjE,IAPvB,SAWE,qBAAKM,UAAU,gCAAf,SACGN,GACC,cAAC,EAAD,CACEA,aAAcA,EACdsE,YAAaA,EACbpE,eAAgBA,gBGvGlC8F,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6089eefb.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  setSelectedPost: (value: Post | null) => void;\n  setIsFormShown: (value: boolean) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n  setIsFormShown,\n}) => {\n  const handleSelectPost = (post: Post) => () => {\n    setSelectedPost(post);\n    setIsFormShown(false);\n  };\n\n  const handleReset = () => {\n    setSelectedPost(null);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {post.id === selectedPost?.id ? (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link\"\n                    onClick={handleReset}\n                  >\n                    Close\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link is-light\"\n                    onClick={handleSelectPost(post)}\n                  >\n                    Open\n                  </button>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { addComment } from '../services/comment';\n\ntype Props = {\n  selectedPost: Post;\n  setComments: (value: Comment[] | { (prev: Comment[]): Comment[] }) => void,\n  setErrorMessage: (value: string) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPost,\n  setComments,\n  setErrorMessage,\n}) => {\n  const initialFormValues = {\n    name: '',\n    email: '',\n    comment: '',\n  };\n\n  const initialErrors = {\n    nameError: false,\n    emailErrorMessage: '',\n    commentError: false,\n  };\n\n  const [formValues, setFormValues] = useState(initialFormValues);\n  const [errors, setErrors] = useState(initialErrors);\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setErrors({\n      ...errors,\n      nameError: false,\n    });\n    setFormValues({\n      ...formValues,\n      name: event.target.value,\n    });\n  };\n\n  const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setErrors({\n      ...errors,\n      emailErrorMessage: '',\n    });\n\n    setFormValues({\n      ...formValues,\n      email: event.target.value,\n    });\n  };\n\n  const handleCommentChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    setErrors({\n      ...errors,\n      commentError: false,\n    });\n\n    setFormValues({\n      ...formValues,\n      comment: event.target.value,\n    });\n  };\n\n  const handleReset = () => {\n    setErrors({\n      nameError: false,\n      emailErrorMessage: '',\n      commentError: false,\n    });\n\n    setFormValues({\n      name: '',\n      email: '',\n      comment: '',\n    });\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    const normilizedName = formValues.name.trim();\n    const normilizedEmail = formValues.email.trim();\n\n    setErrors({\n      ...errors,\n      nameError: !normilizedName,\n      commentError: !formValues.comment,\n    });\n\n    if (!normilizedEmail) {\n      setErrors({\n        ...errors,\n        emailErrorMessage: 'Email is required',\n      });\n    }\n\n    if (normilizedEmail && !emailPattern.test(normilizedEmail)) {\n      setErrors({\n        ...errors,\n        emailErrorMessage: 'Email is invalid',\n      });\n    }\n\n    if (!normilizedName\n      || !emailPattern.test(normilizedEmail)\n      || !formValues.comment\n    ) {\n      return;\n    }\n\n    const newComment = {\n      id: 0,\n      postId: selectedPost.id,\n      name: formValues.name,\n      email: formValues.email,\n      body: formValues.comment,\n    };\n\n    setIsSubmitting(true);\n\n    addComment(newComment)\n      .then(response => {\n        setComments((prev: Comment[]) => [...prev, response]);\n      })\n      .catch(() => setErrorMessage('Can not add a comment, try again later'))\n      .finally(() => {\n        setIsSubmitting(false);\n\n        setFormValues({\n          ...formValues,\n          comment: '',\n        });\n      });\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': errors.nameError })}\n            value={formValues.name}\n            onChange={handleNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errors.nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': errors.emailErrorMessage,\n            })}\n            value={formValues.email}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errors.emailErrorMessage && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.emailErrorMessage && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {errors.emailErrorMessage}\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': errors.commentError,\n            })}\n            value={formValues.comment}\n            onChange={handleCommentChange}\n          />\n        </div>\n\n        {errors.commentError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isSubmitting,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport function getComments(postId: number) {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n}\n\nexport function addComment({\n  postId,\n  name,\n  email,\n  body,\n}: Comment) {\n  return client.post<Comment>('/comments', {\n    postId,\n    name,\n    email,\n    body,\n  });\n}\n\nexport function deleteComment(commentId: number) {\n  return client.delete(`/comments/${commentId}`);\n}\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { deleteComment, getComments } from '../services/comment';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  selectedPost: Post;\n  isFormShown: boolean;\n  setIsFormShown: (value: boolean) => void;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  isFormShown,\n  setIsFormShown,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    setErrorMessage('');\n    setIsLoading(true);\n    getComments(selectedPost.id)\n      .then(setComments)\n      .catch(() => setErrorMessage('Something went wrong'))\n      .finally(() => setIsLoading(false));\n  }, [selectedPost]);\n\n  const handleWriteComment = () => {\n    setIsFormShown(true);\n  };\n\n  const handleDeleteComment = (commentId: number) => () => {\n    setComments(currentComments => {\n      return currentComments.filter(comment => comment.id !== commentId);\n    });\n    deleteComment(commentId)\n      .catch(() => {\n        setComments(comments);\n        setErrorMessage('Can not add a comment, try again later');\n      });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost.id}: ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {\n              selectedPost.body\n            }\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {errorMessage && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {(!comments.length && !isLoading) && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {(comments.length > 0 && !isLoading) && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => (\n                <article\n                  key={comment.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={handleDeleteComment(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {(!isLoading && !isFormShown) && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleWriteComment}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isFormShown && (\n          <NewCommentForm\n            selectedPost={selectedPost}\n            setComments={setComments}\n            setErrorMessage={setErrorMessage}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  setSelectedUser: (value: User) => void,\n  setSelectedPost: (value: Post | null) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n  setSelectedPost,\n}) => {\n  const [isActive, setIsActive] = useState(false);\n\n  const handleSelectUser = (user: User) => () => {\n    setSelectedUser(user);\n    setIsActive(false);\n    setSelectedPost(null);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsActive(!isActive)}\n        >\n\n          <span>\n            {!selectedUser ? (\n              'Choose a user'\n            ) : (\n              selectedUser.name\n            )}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isActive && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className={classNames('dropdown-item', {\n                  'is-active': user.id === selectedUser?.id,\n                })}\n                onClick={handleSelectUser(user)}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUsers } from './services/user';\nimport { User } from './types/User';\nimport { getPosts } from './services/post';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isFormShown, setIsFormShown] = useState(false);\n\n  useEffect(() => {\n    getUsers().then(setUsers);\n  }, []);\n\n  useEffect(() => {\n    setErrorMessage('');\n    if (selectedUser) {\n      setIsLoading(true);\n      getPosts(selectedUser.id)\n        .then(setPosts)\n        .catch(() => setErrorMessage('Something went wrong!'))\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  setSelectedPost={setSelectedPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {errorMessage && (\n\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {(posts && !posts.length && !isLoading) && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {(posts && posts.length > 0 && !isLoading) && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                    setIsFormShown={setIsFormShown}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar', {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                  isFormShown={isFormShown}\n                  setIsFormShown={setIsFormShown}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport function getUsers() {\n  return client.get<User[]>('/users');\n}\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport function getPosts(userId: number) {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n}\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}